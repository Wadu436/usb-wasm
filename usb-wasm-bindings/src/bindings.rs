// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
//   * std_feature
pub mod wadu436 {
    pub mod usb {
        #[allow(clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Version = (u8, u8, u8);
            /// Record for passing into the request-device convenience function.
            #[derive(Clone)]
            pub struct Filter {
                pub vendor_id: Option<u16>,
                pub product_id: Option<u16>,
                pub class_code: Option<u8>,
                pub subclass_code: Option<u8>,
                pub protocol_code: Option<u8>,
                pub serial_number: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Filter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Filter")
                        .field("vendor-id", &self.vendor_id)
                        .field("product-id", &self.product_id)
                        .field("class-code", &self.class_code)
                        .field("subclass-code", &self.subclass_code)
                        .field("protocol-code", &self.protocol_code)
                        .field("serial-number", &self.serial_number)
                        .finish()
                }
            }
            /// Endpoint transfer types
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum TransferType {
                Control,
                Isochronous,
                Bulk,
                Interrupt,
            }
            impl ::core::fmt::Debug for TransferType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TransferType::Control => f.debug_tuple("TransferType::Control").finish(),
                        TransferType::Isochronous => {
                            f.debug_tuple("TransferType::Isochronous").finish()
                        }
                        TransferType::Bulk => f.debug_tuple("TransferType::Bulk").finish(),
                        TransferType::Interrupt => {
                            f.debug_tuple("TransferType::Interrupt").finish()
                        }
                    }
                }
            }

            impl TransferType {
                pub(crate) unsafe fn _lift(val: u8) -> TransferType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => TransferType::Control,
                        1 => TransferType::Isochronous,
                        2 => TransferType::Bulk,
                        3 => TransferType::Interrupt,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Endpoint direction
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Direction {
                Out,
                In,
            }
            impl ::core::fmt::Debug for Direction {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Direction::Out => f.debug_tuple("Direction::Out").finish(),
                        Direction::In => f.debug_tuple("Direction::In").finish(),
                    }
                }
            }

            impl Direction {
                pub(crate) unsafe fn _lift(val: u8) -> Direction {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Direction::Out,
                        1 => Direction::In,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Device speed
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Speed {
                Unknown,
                /// OS doesn't know which speed the device is using
                Low,
                /// 1.5 Mbit/s
                Full,
                /// 12 Mbit/s
                High,
                /// 480 Mbit/s
                Super,
                /// 5 Gbit/s
                Superplus,
            }
            impl ::core::fmt::Debug for Speed {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Speed::Unknown => f.debug_tuple("Speed::Unknown").finish(),
                        Speed::Low => f.debug_tuple("Speed::Low").finish(),
                        Speed::Full => f.debug_tuple("Speed::Full").finish(),
                        Speed::High => f.debug_tuple("Speed::High").finish(),
                        Speed::Super => f.debug_tuple("Speed::Super").finish(),
                        Speed::Superplus => f.debug_tuple("Speed::Superplus").finish(),
                    }
                }
            }

            impl Speed {
                pub(crate) unsafe fn _lift(val: u8) -> Speed {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Speed::Unknown,
                        1 => Speed::Low,
                        2 => Speed::Full,
                        3 => Speed::High,
                        4 => Speed::Super,
                        5 => Speed::Superplus,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Setup type for control transfers
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ControlSetupType {
                Standard,
                Class,
                Vendor,
            }
            impl ::core::fmt::Debug for ControlSetupType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ControlSetupType::Standard => {
                            f.debug_tuple("ControlSetupType::Standard").finish()
                        }
                        ControlSetupType::Class => {
                            f.debug_tuple("ControlSetupType::Class").finish()
                        }
                        ControlSetupType::Vendor => {
                            f.debug_tuple("ControlSetupType::Vendor").finish()
                        }
                    }
                }
            }

            impl ControlSetupType {
                pub(crate) unsafe fn _lift(val: u8) -> ControlSetupType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ControlSetupType::Standard,
                        1 => ControlSetupType::Class,
                        2 => ControlSetupType::Vendor,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Recipient for control transfers
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ControlSetupRecipient {
                Device,
                Interface,
                /// interface, but that's a keyword
                Endpoint,
            }
            impl ::core::fmt::Debug for ControlSetupRecipient {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ControlSetupRecipient::Device => {
                            f.debug_tuple("ControlSetupRecipient::Device").finish()
                        }
                        ControlSetupRecipient::Interface => {
                            f.debug_tuple("ControlSetupRecipient::Interface").finish()
                        }
                        ControlSetupRecipient::Endpoint => {
                            f.debug_tuple("ControlSetupRecipient::Endpoint").finish()
                        }
                    }
                }
            }

            impl ControlSetupRecipient {
                pub(crate) unsafe fn _lift(val: u8) -> ControlSetupRecipient {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ControlSetupRecipient::Device,
                        1 => ControlSetupRecipient::Interface,
                        2 => ControlSetupRecipient::Endpoint,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Control setup packet
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ControlSetup {
                pub request_type: ControlSetupType,
                pub request_recipient: ControlSetupRecipient,
                pub request: u8,
                /// bRequest
                pub value: u16,
                /// wValue
                pub index: u16,
            }
            impl ::core::fmt::Debug for ControlSetup {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ControlSetup")
                        .field("request-type", &self.request_type)
                        .field("request-recipient", &self.request_recipient)
                        .field("request", &self.request)
                        .field("value", &self.value)
                        .field("index", &self.index)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod descriptors {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Version = super::super::super::wadu436::usb::types::Version;
            pub type Direction = super::super::super::wadu436::usb::types::Direction;
            pub type TransferType = super::super::super::wadu436::usb::types::TransferType;
            /// Contains the fields of the device descriptor as defined in the USB 2.0 spec
            #[derive(Clone)]
            pub struct DeviceDescriptor {
                pub product_name: Option<_rt::String>,
                pub manufacturer_name: Option<_rt::String>,
                pub serial_number: Option<_rt::String>,
                pub usb_version: Version,
                pub vendor_id: u16,
                pub product_id: u16,
                pub device_version: Version,
                pub device_class: u8,
                pub device_subclass: u8,
                pub device_protocol: u8,
                pub max_packet_size: u8,
            }
            impl ::core::fmt::Debug for DeviceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DeviceDescriptor")
                        .field("product-name", &self.product_name)
                        .field("manufacturer-name", &self.manufacturer_name)
                        .field("serial-number", &self.serial_number)
                        .field("usb-version", &self.usb_version)
                        .field("vendor-id", &self.vendor_id)
                        .field("product-id", &self.product_id)
                        .field("device-version", &self.device_version)
                        .field("device-class", &self.device_class)
                        .field("device-subclass", &self.device_subclass)
                        .field("device-protocol", &self.device_protocol)
                        .field("max-packet-size", &self.max_packet_size)
                        .finish()
                }
            }
            /// Contains the fields of the configuration descriptor
            #[derive(Clone)]
            pub struct ConfigurationDescriptor {
                pub number: u8,
                pub description: Option<_rt::String>,
                pub self_powered: bool,
                pub remote_wakeup: bool,
                pub max_power: u16,
            }
            impl ::core::fmt::Debug for ConfigurationDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ConfigurationDescriptor")
                        .field("number", &self.number)
                        .field("description", &self.description)
                        .field("self-powered", &self.self_powered)
                        .field("remote-wakeup", &self.remote_wakeup)
                        .field("max-power", &self.max_power)
                        .finish()
                }
            }
            /// Contains the fields of the interface descriptor
            #[derive(Clone)]
            pub struct InterfaceDescriptor {
                pub interface_number: u8,
                pub alternate_setting: u8,
                pub interface_class: u8,
                pub interface_subclass: u8,
                pub interface_protocol: u8,
                pub interface_name: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for InterfaceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("InterfaceDescriptor")
                        .field("interface-number", &self.interface_number)
                        .field("alternate-setting", &self.alternate_setting)
                        .field("interface-class", &self.interface_class)
                        .field("interface-subclass", &self.interface_subclass)
                        .field("interface-protocol", &self.interface_protocol)
                        .field("interface-name", &self.interface_name)
                        .finish()
                }
            }
            /// Contains the fields of the endpoint descriptor
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndpointDescriptor {
                pub endpoint_number: u8,
                /// 0-15, lower 4 bits of the bEndpointAddress field
                pub direction: Direction,
                /// corresponds to bit 7 of the bEndpointAddress field
                pub transfer_type: TransferType,
                /// corresponds to bits 0-1 of the bmAttributes field
                pub max_packet_size: u16,
                pub interval: u8,
            }
            impl ::core::fmt::Debug for EndpointDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EndpointDescriptor")
                        .field("endpoint-number", &self.endpoint_number)
                        .field("direction", &self.direction)
                        .field("transfer-type", &self.transfer_type)
                        .field("max-packet-size", &self.max_packet_size)
                        .field("interval", &self.interval)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod device {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type DeviceDescriptor =
                super::super::super::wadu436::usb::descriptors::DeviceDescriptor;
            pub type ConfigurationDescriptor =
                super::super::super::wadu436::usb::descriptors::ConfigurationDescriptor;
            pub type InterfaceDescriptor =
                super::super::super::wadu436::usb::descriptors::InterfaceDescriptor;
            pub type EndpointDescriptor =
                super::super::super::wadu436::usb::descriptors::EndpointDescriptor;
            pub type Speed = super::super::super::wadu436::usb::types::Speed;
            pub type Filter = super::super::super::wadu436::usb::types::Filter;
            pub type ControlSetup = super::super::super::wadu436::usb::types::ControlSetup;
            /// Main resource representing a USB device. Any communication with the device happens through this resource.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbDevice {
                handle: _rt::Resource<UsbDevice>,
            }

            impl UsbDevice {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for UsbDevice {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-device"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB configuration. A device can have multiple configurations, but only one can be active at a time.
            /// Must be dropped before parent device is dropped

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbConfiguration {
                handle: _rt::Resource<UsbConfiguration>,
            }

            impl UsbConfiguration {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for UsbConfiguration {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-configuration"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB interface.
            /// This resource actually represents an *alternate* interface. An interface can have multiple alternates, but only one can be active at a time.
            /// Must be dropped before parent configuration is dropped

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbInterface {
                handle: _rt::Resource<UsbInterface>,
            }

            impl UsbInterface {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for UsbInterface {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-interface"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB endpoint.
            /// Must be dropped before parent interface is dropped

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbEndpoint {
                handle: _rt::Resource<UsbEndpoint>,
            }

            impl UsbEndpoint {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for UsbEndpoint {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-endpoint"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Main entry point for the API.
                /// Returns all the USB devices currently connected to the system (or if access control is implemented by the runtime, only the ones the component has access to)
                pub fn enumerate() -> _rt::Vec<UsbDevice> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]usb-device.enumerate"]
                            fn wit_import(_: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                UsbDevice::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Convenience funtion, equivalent to calling enumerate(), applying the provided filters to the list, and returning the first element
                pub fn request_device(filter: &Filter) -> Option<UsbDevice> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let super::super::super::wadu436::usb::types::Filter {
                            vendor_id: vendor_id0,
                            product_id: product_id0,
                            class_code: class_code0,
                            subclass_code: subclass_code0,
                            protocol_code: protocol_code0,
                            serial_number: serial_number0,
                        } = filter;
                        let (result1_0, result1_1) = match vendor_id0 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result2_0, result2_1) = match product_id0 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result3_0, result3_1) = match class_code0 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result4_0, result4_1) = match subclass_code0 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result5_0, result5_1) = match protocol_code0 {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result7_0, result7_1, result7_2) = match serial_number0 {
                            Some(e) => {
                                let vec6 = e;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();

                                (1i32, ptr6.cast_mut(), len6)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]usb-device.request-device"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            result1_0, result1_1, result2_0, result2_1, result3_0, result3_1,
                            result4_0, result4_1, result5_0, result5_1, result7_0, result7_1,
                            result7_2, ptr8,
                        );
                        let l9 = i32::from(*ptr8.add(0).cast::<u8>());
                        match l9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l10 = *ptr8.add(4).cast::<i32>();

                                    UsbDevice::from_handle(l10 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the device descriptor of the device
                pub fn descriptor(&self) -> DeviceDescriptor {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 52]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 52]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.descriptor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let l5 = i32::from(*ptr0.add(12).cast::<u8>());
                        let l9 = i32::from(*ptr0.add(24).cast::<u8>());
                        let l13 = i32::from(*ptr0.add(36).cast::<u8>());
                        let l14 = i32::from(*ptr0.add(37).cast::<u8>());
                        let l15 = i32::from(*ptr0.add(38).cast::<u8>());
                        let l16 = i32::from(*ptr0.add(40).cast::<u16>());
                        let l17 = i32::from(*ptr0.add(42).cast::<u16>());
                        let l18 = i32::from(*ptr0.add(44).cast::<u8>());
                        let l19 = i32::from(*ptr0.add(45).cast::<u8>());
                        let l20 = i32::from(*ptr0.add(46).cast::<u8>());
                        let l21 = i32::from(*ptr0.add(47).cast::<u8>());
                        let l22 = i32::from(*ptr0.add(48).cast::<u8>());
                        let l23 = i32::from(*ptr0.add(49).cast::<u8>());
                        let l24 = i32::from(*ptr0.add(50).cast::<u8>());
                        super::super::super::wadu436::usb::descriptors::DeviceDescriptor {
                            product_name: match l1 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l2 = *ptr0.add(4).cast::<*mut u8>();
                                        let l3 = *ptr0.add(8).cast::<usize>();
                                        let len4 = l3;
                                        let bytes4 =
                                            _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                        _rt::string_lift(bytes4)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            manufacturer_name: match l5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l6 = *ptr0.add(16).cast::<*mut u8>();
                                        let l7 = *ptr0.add(20).cast::<usize>();
                                        let len8 = l7;
                                        let bytes8 =
                                            _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                        _rt::string_lift(bytes8)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            serial_number: match l9 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l10 = *ptr0.add(28).cast::<*mut u8>();
                                        let l11 = *ptr0.add(32).cast::<usize>();
                                        let len12 = l11;
                                        let bytes12 =
                                            _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                        _rt::string_lift(bytes12)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            usb_version: (l13 as u8, l14 as u8, l15 as u8),
                            vendor_id: l16 as u16,
                            product_id: l17 as u16,
                            device_version: (l18 as u8, l19 as u8, l20 as u8),
                            device_class: l21 as u8,
                            device_subclass: l22 as u8,
                            device_protocol: l23 as u8,
                            max_packet_size: l24 as u8,
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the USB Speed of the device (Low, Full, High, ...)
                pub fn speed(&self) -> Speed {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.speed"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wadu436::usb::types::Speed::_lift(ret as u8)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns all the configurations the device supports
                pub fn configurations(&self) -> _rt::Vec<UsbConfiguration> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.configurations"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                UsbConfiguration::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the currently active configuration
                pub fn active_configuration(&self) -> UsbConfiguration {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.active-configuration"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        UsbConfiguration::from_handle(ret as u32)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Opens the device. This is required before any transfers can be made.
                pub fn open(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.open"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns whether the device is currently open.
                pub fn opened(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.opened"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Resets the device.
                pub fn reset(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.reset"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Closes the device.
                pub fn close(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.close"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Selects the active configuration. The device must first be opened.
                pub fn select_configuration(&self, configuration: &UsbConfiguration) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.select-configuration"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (configuration).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Claims an interface for exclusive use. Also selects the alternate interface, as the usb-interface resource actually represents an alternate interface.
                pub fn claim_interface(&self, interface: &UsbInterface) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.claim-interface"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (interface).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Releases an interface.
                pub fn release_interface(&self, interface: &UsbInterface) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.release-interface"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (interface).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Clears a halt on a specific endpoint.
                pub fn clear_halt(&self, endpoint: &UsbEndpoint) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.clear-halt"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read control data from the device. The endpoint is always EP0.
                pub fn read_control(&self, request: ControlSetup, length: u16) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let super::super::super::wadu436::usb::types::ControlSetup {
                            request_type: request_type0,
                            request_recipient: request_recipient0,
                            request: request0,
                            value: value0,
                            index: index0,
                        } = request;
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-control"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            request_type0.clone() as i32,
                            request_recipient0.clone() as i32,
                            _rt::as_i32(request0),
                            _rt::as_i32(value0),
                            _rt::as_i32(index0),
                            _rt::as_i32(&length),
                            ptr1,
                        );
                        let l2 = *ptr1.add(0).cast::<*mut u8>();
                        let l3 = *ptr1.add(4).cast::<usize>();
                        let len4 = l3;
                        _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write control data to the device. The endpoint is always EP0. The return value is the number of bytes written.
                pub fn write_control(&self, request: ControlSetup, data: &[u8]) -> u64 {
                    unsafe {
                        let super::super::super::wadu436::usb::types::ControlSetup {
                            request_type: request_type0,
                            request_recipient: request_recipient0,
                            request: request0,
                            value: value0,
                            index: index0,
                        } = request;
                        let vec1 = data;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-control"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            ) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            request_type0.clone() as i32,
                            request_recipient0.clone() as i32,
                            _rt::as_i32(request0),
                            _rt::as_i32(value0),
                            _rt::as_i32(index0),
                            ptr1.cast_mut(),
                            len1,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read data from an interrupt endpoint. The endpoint must be an interrupt endpoint.
                pub fn read_interrupt(&self, endpoint: &UsbEndpoint, length: u64) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-interrupt"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            _rt::as_i64(&length),
                            ptr0,
                        );
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to an interrupt endpoint. The endpoint must be an interrupt endpoint. The return value is the number of bytes written.
                pub fn write_interrupt(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-interrupt"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read data from a bulk endpoint. The endpoint must be a bulk endpoint.
                pub fn read_bulk(&self, endpoint: &UsbEndpoint, length: u64) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-bulk"]
                            fn wit_import(_: i32, _: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            _rt::as_i64(&length),
                            ptr0,
                        );
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to a bulk endpoint. The endpoint must be a bulk endpoint. The return value is the number of bytes written.
                pub fn write_bulk(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-bulk"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// TODO: support sending/receiving multiple packets at once for isochronous endpoints?
                /// Read data from an isochronous endpoint. The endpoint must be an isochronous endpoint.
                pub fn read_isochronous(&self, endpoint: &UsbEndpoint) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-isochronous"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to an isochronous endpoint. The endpoint must be an isochronous endpoint. The return value is the number of bytes written.
                pub fn write_isochronous(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-isochronous"]
                            fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8, _: usize) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbConfiguration {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> ConfigurationDescriptor {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-configuration.descriptor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(16).cast::<u8>());
                        let l7 = i32::from(*ptr0.add(17).cast::<u8>());
                        let l8 = i32::from(*ptr0.add(18).cast::<u16>());
                        super::super::super::wadu436::usb::descriptors::ConfigurationDescriptor {
                            number: l1 as u8,
                            description: match l2 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l3 = *ptr0.add(8).cast::<*mut u8>();
                                        let l4 = *ptr0.add(12).cast::<usize>();
                                        let len5 = l4;
                                        let bytes5 =
                                            _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                        _rt::string_lift(bytes5)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            self_powered: _rt::bool_lift(l6 as u8),
                            remote_wakeup: _rt::bool_lift(l7 as u8),
                            max_power: l8 as u16,
                        }
                    }
                }
            }
            impl UsbConfiguration {
                #[allow(unused_unsafe, clippy::all)]
                pub fn interfaces(&self) -> _rt::Vec<UsbInterface> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-configuration.interfaces"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                UsbInterface::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl UsbInterface {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> InterfaceDescriptor {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-interface.descriptor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let l2 = i32::from(*ptr0.add(1).cast::<u8>());
                        let l3 = i32::from(*ptr0.add(2).cast::<u8>());
                        let l4 = i32::from(*ptr0.add(3).cast::<u8>());
                        let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                        let l6 = i32::from(*ptr0.add(8).cast::<u8>());
                        super::super::super::wadu436::usb::descriptors::InterfaceDescriptor {
                            interface_number: l1 as u8,
                            alternate_setting: l2 as u8,
                            interface_class: l3 as u8,
                            interface_subclass: l4 as u8,
                            interface_protocol: l5 as u8,
                            interface_name: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *ptr0.add(12).cast::<*mut u8>();
                                        let l8 = *ptr0.add(16).cast::<usize>();
                                        let len9 = l8;
                                        let bytes9 =
                                            _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                        _rt::string_lift(bytes9)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl UsbInterface {
                #[allow(unused_unsafe, clippy::all)]
                pub fn endpoints(&self) -> _rt::Vec<UsbEndpoint> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-interface.endpoints"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                UsbEndpoint::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl UsbEndpoint {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> EndpointDescriptor {
                    unsafe {
                        #[repr(align(2))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-endpoint.descriptor"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let l2 = i32::from(*ptr0.add(1).cast::<u8>());
                        let l3 = i32::from(*ptr0.add(2).cast::<u8>());
                        let l4 = i32::from(*ptr0.add(4).cast::<u16>());
                        let l5 = i32::from(*ptr0.add(6).cast::<u8>());
                        super::super::super::wadu436::usb::descriptors::EndpointDescriptor {
                            endpoint_number: l1 as u8,
                            direction: super::super::super::wadu436::usb::types::Direction::_lift(
                                l2 as u8,
                            ),
                            transfer_type:
                                super::super::super::wadu436::usb::types::TransferType::_lift(
                                    l3 as u8,
                                ),
                            max_packet_size: l4 as u16,
                            interval: l5 as u8,
                        }
                    }
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            ::core::mem::transmute::<u8, bool>(val)
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:bindings:encoded worldrust-wasi-from-crates-io"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3206] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x87\x18\x01A\x02\x01\
A\x12\x01B\x13\x01o\x03}}}\x04\0\x07version\x03\0\0\x01k{\x01k}\x01ks\x01r\x06\x09\
vendor-id\x02\x0aproduct-id\x02\x0aclass-code\x03\x0dsubclass-code\x03\x0dprotoc\
ol-code\x03\x0dserial-number\x04\x04\0\x06filter\x03\0\x05\x01m\x04\x07control\x0b\
isochronous\x04bulk\x09interrupt\x04\0\x0dtransfer-type\x03\0\x07\x01m\x02\x03ou\
t\x02in\x04\0\x09direction\x03\0\x09\x01m\x06\x07unknown\x03low\x04full\x04high\x05\
super\x09superplus\x04\0\x05speed\x03\0\x0b\x01m\x03\x08standard\x05class\x06ven\
dor\x04\0\x12control-setup-type\x03\0\x0d\x01m\x03\x06device\x09interface\x08end\
point\x04\0\x17control-setup-recipient\x03\0\x0f\x01r\x05\x0crequest-type\x0e\x11\
request-recipient\x10\x07request}\x05value{\x05index{\x04\0\x0dcontrol-setup\x03\
\0\x11\x03\x01\x17wadu436:usb/types@0.0.1\x05\0\x02\x03\0\0\x07version\x02\x03\0\
\0\x09direction\x02\x03\0\0\x0dtransfer-type\x01B\x0f\x02\x03\x02\x01\x01\x04\0\x07\
version\x03\0\0\x02\x03\x02\x01\x02\x04\0\x09direction\x03\0\x02\x02\x03\x02\x01\
\x03\x04\0\x0dtransfer-type\x03\0\x04\x01ks\x01r\x0b\x0cproduct-name\x06\x11manu\
facturer-name\x06\x0dserial-number\x06\x0busb-version\x01\x09vendor-id{\x0aprodu\
ct-id{\x0edevice-version\x01\x0cdevice-class}\x0fdevice-subclass}\x0fdevice-prot\
ocol}\x0fmax-packet-size}\x04\0\x11device-descriptor\x03\0\x07\x01r\x05\x06numbe\
r}\x0bdescription\x06\x0cself-powered\x7f\x0dremote-wakeup\x7f\x09max-power{\x04\
\0\x18configuration-descriptor\x03\0\x09\x01r\x06\x10interface-number}\x11altern\
ate-setting}\x0finterface-class}\x12interface-subclass}\x12interface-protocol}\x0e\
interface-name\x06\x04\0\x14interface-descriptor\x03\0\x0b\x01r\x05\x0fendpoint-\
number}\x09direction\x03\x0dtransfer-type\x05\x0fmax-packet-size{\x08interval}\x04\
\0\x13endpoint-descriptor\x03\0\x0d\x03\x01\x1dwadu436:usb/descriptors@0.0.1\x05\
\x04\x02\x03\0\x01\x11device-descriptor\x02\x03\0\x01\x18configuration-descripto\
r\x02\x03\0\x01\x14interface-descriptor\x02\x03\0\x01\x13endpoint-descriptor\x02\
\x03\0\0\x05speed\x02\x03\0\0\x06filter\x02\x03\0\0\x12control-setup-type\x02\x03\
\0\0\x17control-setup-recipient\x02\x03\0\0\x0dcontrol-setup\x01BT\x02\x03\x02\x01\
\x05\x04\0\x11device-descriptor\x03\0\0\x02\x03\x02\x01\x06\x04\0\x18configurati\
on-descriptor\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x14interface-descriptor\x03\0\x04\
\x02\x03\x02\x01\x08\x04\0\x13endpoint-descriptor\x03\0\x06\x02\x03\x02\x01\x09\x04\
\0\x05speed\x03\0\x08\x02\x03\x02\x01\x0a\x04\0\x06filter\x03\0\x0a\x02\x03\x02\x01\
\x0b\x04\0\x12control-setup-type\x03\0\x0c\x02\x03\x02\x01\x0c\x04\0\x17control-\
setup-recipient\x03\0\x0e\x02\x03\x02\x01\x0d\x04\0\x0dcontrol-setup\x03\0\x10\x04\
\0\x0ausb-device\x03\x01\x04\0\x11usb-configuration\x03\x01\x04\0\x0dusb-interfa\
ce\x03\x01\x04\0\x0cusb-endpoint\x03\x01\x01i\x12\x01p\x16\x01@\0\0\x17\x04\0\x1c\
[static]usb-device.enumerate\x01\x18\x01k\x16\x01@\x01\x06filter\x0b\0\x19\x04\0\
![static]usb-device.request-device\x01\x1a\x01h\x12\x01@\x01\x04self\x1b\0\x01\x04\
\0\x1d[method]usb-device.descriptor\x01\x1c\x01@\x01\x04self\x1b\0\x09\x04\0\x18\
[method]usb-device.speed\x01\x1d\x01i\x13\x01p\x1e\x01@\x01\x04self\x1b\0\x1f\x04\
\0![method]usb-device.configurations\x01\x20\x01@\x01\x04self\x1b\0\x1e\x04\0'[m\
ethod]usb-device.active-configuration\x01!\x01@\x01\x04self\x1b\x01\0\x04\0\x17[\
method]usb-device.open\x01\"\x01@\x01\x04self\x1b\0\x7f\x04\0\x19[method]usb-dev\
ice.opened\x01#\x04\0\x18[method]usb-device.reset\x01\"\x04\0\x18[method]usb-dev\
ice.close\x01\"\x01h\x13\x01@\x02\x04self\x1b\x0dconfiguration$\x01\0\x04\0'[met\
hod]usb-device.select-configuration\x01%\x01h\x14\x01@\x02\x04self\x1b\x09interf\
ace&\x01\0\x04\0\"[method]usb-device.claim-interface\x01'\x04\0$[method]usb-devi\
ce.release-interface\x01'\x01h\x15\x01@\x02\x04self\x1b\x08endpoint(\x01\0\x04\0\
\x1d[method]usb-device.clear-halt\x01)\x01p}\x01@\x03\x04self\x1b\x07request\x11\
\x06length{\0*\x04\0\x1f[method]usb-device.read-control\x01+\x01@\x03\x04self\x1b\
\x07request\x11\x04data*\0w\x04\0\x20[method]usb-device.write-control\x01,\x01@\x03\
\x04self\x1b\x08endpoint(\x06lengthw\0*\x04\0![method]usb-device.read-interrupt\x01\
-\x01@\x03\x04self\x1b\x08endpoint(\x04data*\0w\x04\0\"[method]usb-device.write-\
interrupt\x01.\x04\0\x1c[method]usb-device.read-bulk\x01-\x04\0\x1d[method]usb-d\
evice.write-bulk\x01.\x01@\x02\x04self\x1b\x08endpoint(\0*\x04\0#[method]usb-dev\
ice.read-isochronous\x01/\x04\0$[method]usb-device.write-isochronous\x01.\x01@\x01\
\x04self$\0\x03\x04\0$[method]usb-configuration.descriptor\x010\x01i\x14\x01p1\x01\
@\x01\x04self$\02\x04\0$[method]usb-configuration.interfaces\x013\x01@\x01\x04se\
lf&\0\x05\x04\0\x20[method]usb-interface.descriptor\x014\x01i\x15\x01p5\x01@\x01\
\x04self&\06\x04\0\x1f[method]usb-interface.endpoints\x017\x01@\x01\x04self(\0\x07\
\x04\0\x1f[method]usb-endpoint.descriptor\x018\x03\x01\x18wadu436:usb/device@0.0\
.1\x05\x0e\x04\x01\x1dwadu436:usb-bindings/bindings\x04\0\x0b\x0e\x01\0\x08bindi\
ngs\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10\
wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
