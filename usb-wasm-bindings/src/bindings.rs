// Generated by `wit-bindgen` 0.19.1. DO NOT EDIT!
// Options used:
//   * std_feature
pub mod wadu436 {
    pub mod usb {

        #[allow(clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type Version = (u8, u8, u8);
            /// Record for passing into the request-device convenience function.
            #[derive(Clone)]
            pub struct Filter {
                pub vendor_id: Option<u16>,
                pub product_id: Option<u16>,
                pub class_code: Option<u8>,
                pub subclass_code: Option<u8>,
                pub protocol_code: Option<u8>,
                pub serial_number: Option<wit_bindgen::rt::string::String>,
            }
            impl ::core::fmt::Debug for Filter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Filter")
                        .field("vendor-id", &self.vendor_id)
                        .field("product-id", &self.product_id)
                        .field("class-code", &self.class_code)
                        .field("subclass-code", &self.subclass_code)
                        .field("protocol-code", &self.protocol_code)
                        .field("serial-number", &self.serial_number)
                        .finish()
                }
            }
            /// Endpoint transfer types
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum TransferType {
                Control,
                Isochronous,
                Bulk,
                Interrupt,
            }
            impl ::core::fmt::Debug for TransferType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TransferType::Control => f.debug_tuple("TransferType::Control").finish(),
                        TransferType::Isochronous => {
                            f.debug_tuple("TransferType::Isochronous").finish()
                        }
                        TransferType::Bulk => f.debug_tuple("TransferType::Bulk").finish(),
                        TransferType::Interrupt => {
                            f.debug_tuple("TransferType::Interrupt").finish()
                        }
                    }
                }
            }

            impl TransferType {
                pub(crate) unsafe fn _lift(val: u8) -> TransferType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => TransferType::Control,
                        1 => TransferType::Isochronous,
                        2 => TransferType::Bulk,
                        3 => TransferType::Interrupt,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Endpoint direction
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Direction {
                Out,
                In,
            }
            impl ::core::fmt::Debug for Direction {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Direction::Out => f.debug_tuple("Direction::Out").finish(),
                        Direction::In => f.debug_tuple("Direction::In").finish(),
                    }
                }
            }

            impl Direction {
                pub(crate) unsafe fn _lift(val: u8) -> Direction {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Direction::Out,
                        1 => Direction::In,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Device speed
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Speed {
                Unknown,
                /// OS doesn't know which speed the device is using
                Low,
                /// 1.5 Mbit/s
                Full,
                /// 12 Mbit/s
                High,
                /// 480 Mbit/s
                Super,
                /// 5 Gbit/s
                Superplus,
            }
            impl ::core::fmt::Debug for Speed {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Speed::Unknown => f.debug_tuple("Speed::Unknown").finish(),
                        Speed::Low => f.debug_tuple("Speed::Low").finish(),
                        Speed::Full => f.debug_tuple("Speed::Full").finish(),
                        Speed::High => f.debug_tuple("Speed::High").finish(),
                        Speed::Super => f.debug_tuple("Speed::Super").finish(),
                        Speed::Superplus => f.debug_tuple("Speed::Superplus").finish(),
                    }
                }
            }

            impl Speed {
                pub(crate) unsafe fn _lift(val: u8) -> Speed {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Speed::Unknown,
                        1 => Speed::Low,
                        2 => Speed::Full,
                        3 => Speed::High,
                        4 => Speed::Super,
                        5 => Speed::Superplus,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Setup type for control transfers
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ControlSetupType {
                Standard,
                Class,
                Vendor,
            }
            impl ::core::fmt::Debug for ControlSetupType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ControlSetupType::Standard => {
                            f.debug_tuple("ControlSetupType::Standard").finish()
                        }
                        ControlSetupType::Class => {
                            f.debug_tuple("ControlSetupType::Class").finish()
                        }
                        ControlSetupType::Vendor => {
                            f.debug_tuple("ControlSetupType::Vendor").finish()
                        }
                    }
                }
            }

            impl ControlSetupType {
                pub(crate) unsafe fn _lift(val: u8) -> ControlSetupType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ControlSetupType::Standard,
                        1 => ControlSetupType::Class,
                        2 => ControlSetupType::Vendor,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Recipient for control transfers
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ControlSetupRecipient {
                Device,
                If,
                /// interface, but that's a keyword
                Endpoint,
            }
            impl ::core::fmt::Debug for ControlSetupRecipient {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ControlSetupRecipient::Device => {
                            f.debug_tuple("ControlSetupRecipient::Device").finish()
                        }
                        ControlSetupRecipient::If => {
                            f.debug_tuple("ControlSetupRecipient::If").finish()
                        }
                        ControlSetupRecipient::Endpoint => {
                            f.debug_tuple("ControlSetupRecipient::Endpoint").finish()
                        }
                    }
                }
            }

            impl ControlSetupRecipient {
                pub(crate) unsafe fn _lift(val: u8) -> ControlSetupRecipient {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ControlSetupRecipient::Device,
                        1 => ControlSetupRecipient::If,
                        2 => ControlSetupRecipient::Endpoint,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Control setup packet
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ControlSetup {
                pub request_type: ControlSetupType,
                pub request_recipient: ControlSetupRecipient,
                pub request: u8,
                /// bRequest
                pub value: u16,
                /// wValue
                pub index: u16,
            }
            impl ::core::fmt::Debug for ControlSetup {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ControlSetup")
                        .field("request-type", &self.request_type)
                        .field("request-recipient", &self.request_recipient)
                        .field("request", &self.request)
                        .field("value", &self.value)
                        .field("index", &self.index)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod descriptors {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type Version = super::super::super::wadu436::usb::types::Version;
            pub type Direction = super::super::super::wadu436::usb::types::Direction;
            pub type TransferType = super::super::super::wadu436::usb::types::TransferType;
            /// Contains the fields of the device descriptor as defined in the USB 2.0 spec
            #[derive(Clone)]
            pub struct DeviceDescriptor {
                pub product_name: Option<wit_bindgen::rt::string::String>,
                pub manufacturer_name: Option<wit_bindgen::rt::string::String>,
                pub serial_number: Option<wit_bindgen::rt::string::String>,
                pub usb_version: Version,
                pub vendor_id: u16,
                pub product_id: u16,
                pub device_version: Version,
                pub device_class: u8,
                pub device_subclass: u8,
                pub device_protocol: u8,
            }
            impl ::core::fmt::Debug for DeviceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DeviceDescriptor")
                        .field("product-name", &self.product_name)
                        .field("manufacturer-name", &self.manufacturer_name)
                        .field("serial-number", &self.serial_number)
                        .field("usb-version", &self.usb_version)
                        .field("vendor-id", &self.vendor_id)
                        .field("product-id", &self.product_id)
                        .field("device-version", &self.device_version)
                        .field("device-class", &self.device_class)
                        .field("device-subclass", &self.device_subclass)
                        .field("device-protocol", &self.device_protocol)
                        .finish()
                }
            }
            /// Contains the fields of the configuration descriptor
            #[derive(Clone)]
            pub struct ConfigurationDescriptor {
                pub number: u8,
                pub description: Option<wit_bindgen::rt::string::String>,
                pub self_powered: bool,
                pub remote_wakeup: bool,
                pub max_power: u16,
            }
            impl ::core::fmt::Debug for ConfigurationDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ConfigurationDescriptor")
                        .field("number", &self.number)
                        .field("description", &self.description)
                        .field("self-powered", &self.self_powered)
                        .field("remote-wakeup", &self.remote_wakeup)
                        .field("max-power", &self.max_power)
                        .finish()
                }
            }
            /// Contains the fields of the interface descriptor
            #[derive(Clone)]
            pub struct InterfaceDescriptor {
                pub interface_number: u8,
                pub alternate_setting: u8,
                pub interface_class: u8,
                pub interface_subclass: u8,
                pub interface_protocol: u8,
                pub interface_name: Option<wit_bindgen::rt::string::String>,
            }
            impl ::core::fmt::Debug for InterfaceDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("InterfaceDescriptor")
                        .field("interface-number", &self.interface_number)
                        .field("alternate-setting", &self.alternate_setting)
                        .field("interface-class", &self.interface_class)
                        .field("interface-subclass", &self.interface_subclass)
                        .field("interface-protocol", &self.interface_protocol)
                        .field("interface-name", &self.interface_name)
                        .finish()
                }
            }
            /// Contains the fields of the endpoint descriptor
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndpointDescriptor {
                pub endpoint_number: u8,
                /// 0-15, lower 4 bits of the bEndpointAddress field
                pub direction: Direction,
                /// corresponds to bit 7 of the bEndpointAddress field
                pub transfer_type: TransferType,
                /// corresponds to bits 0-1 of the bmAttributes field
                pub max_packet_size: u16,
                pub interval: u8,
            }
            impl ::core::fmt::Debug for EndpointDescriptor {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EndpointDescriptor")
                        .field("endpoint-number", &self.endpoint_number)
                        .field("direction", &self.direction)
                        .field("transfer-type", &self.transfer_type)
                        .field("max-packet-size", &self.max_packet_size)
                        .field("interval", &self.interval)
                        .finish()
                }
            }
        }

        #[allow(clippy::all)]
        pub mod device {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
            pub type DeviceDescriptor =
                super::super::super::wadu436::usb::descriptors::DeviceDescriptor;
            pub type ConfigurationDescriptor =
                super::super::super::wadu436::usb::descriptors::ConfigurationDescriptor;
            pub type InterfaceDescriptor =
                super::super::super::wadu436::usb::descriptors::InterfaceDescriptor;
            pub type EndpointDescriptor =
                super::super::super::wadu436::usb::descriptors::EndpointDescriptor;
            pub type Speed = super::super::super::wadu436::usb::types::Speed;
            pub type Filter = super::super::super::wadu436::usb::types::Filter;
            pub type ControlSetup = super::super::super::wadu436::usb::types::ControlSetup;
            /// Main resource representing a USB device. Any communication with the device happens through this resource.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbDevice {
                handle: wit_bindgen::rt::Resource<UsbDevice>,
            }

            impl UsbDevice {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: wit_bindgen::rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl wit_bindgen::rt::WasmResource for UsbDevice {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-device"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB configuration. A device can have multiple configurations, but only one can be active at a time.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbConfiguration {
                handle: wit_bindgen::rt::Resource<UsbConfiguration>,
            }

            impl UsbConfiguration {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: wit_bindgen::rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl wit_bindgen::rt::WasmResource for UsbConfiguration {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-configuration"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB interface.
            /// This resource actually represents an *alternate* interface. An interface can have multiple alternates, but only one can be active at a time.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbInterface {
                handle: wit_bindgen::rt::Resource<UsbInterface>,
            }

            impl UsbInterface {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: wit_bindgen::rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl wit_bindgen::rt::WasmResource for UsbInterface {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-interface"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            /// Represents a USB endpoint.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct UsbEndpoint {
                handle: wit_bindgen::rt::Resource<UsbEndpoint>,
            }

            impl UsbEndpoint {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: wit_bindgen::rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl wit_bindgen::rt::WasmResource for UsbEndpoint {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]usb-endpoint"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Main entry point for the API.
                /// Returns all the USB devices currently connected to the system (or if access control is implemented by the runtime, only the ones the component has access to)
                pub fn enumerate() -> wit_bindgen::rt::vec::Vec<UsbDevice> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]usb-device.enumerate"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = Vec::with_capacity(len4 as usize);
                        for i in 0..len4 {
                            let base = base4 + i * 4;
                            let e4 = {
                                let l3 = *((base + 0) as *const i32);

                                UsbDevice::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        wit_bindgen::rt::dealloc(base4, (len4 as usize) * 4, 4);
                        result4
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Convenience funtion, equivalent to calling enumerate(), applying the provided filters to the list, and returning the first element
                pub fn request_device(filter: &Filter) -> Option<UsbDevice> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let super::super::super::wadu436::usb::types::Filter {
                            vendor_id: vendor_id0,
                            product_id: product_id0,
                            class_code: class_code0,
                            subclass_code: subclass_code0,
                            protocol_code: protocol_code0,
                            serial_number: serial_number0,
                        } = filter;
                        let (result1_0, result1_1) = match vendor_id0 {
                            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result2_0, result2_1) = match product_id0 {
                            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result3_0, result3_1) = match class_code0 {
                            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result4_0, result4_1) = match subclass_code0 {
                            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result5_0, result5_1) = match protocol_code0 {
                            Some(e) => (1i32, wit_bindgen::rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result7_0, result7_1, result7_2) = match serial_number0 {
                            Some(e) => {
                                let vec6 = e;
                                let ptr6 = vec6.as_ptr() as i32;
                                let len6 = vec6.len() as i32;

                                (1i32, ptr6, len6)
                            }
                            None => (0i32, 0i32, 0i32),
                        };
                        let ptr8 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]usb-device.request-device"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            result1_0, result1_1, result2_0, result2_1, result3_0, result3_1,
                            result4_0, result4_1, result5_0, result5_1, result7_0, result7_1,
                            result7_2, ptr8,
                        );
                        let l9 = i32::from(*((ptr8 + 0) as *const u8));
                        match l9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l10 = *((ptr8 + 4) as *const i32);

                                    UsbDevice::from_handle(l10 as u32)
                                };
                                Some(e)
                            }
                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the device descriptor of the device
                pub fn descriptor(&self) -> DeviceDescriptor {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 52]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.descriptor"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*((ptr0 + 0) as *const u8));
                        let l5 = i32::from(*((ptr0 + 12) as *const u8));
                        let l9 = i32::from(*((ptr0 + 24) as *const u8));
                        let l13 = i32::from(*((ptr0 + 36) as *const u8));
                        let l14 = i32::from(*((ptr0 + 37) as *const u8));
                        let l15 = i32::from(*((ptr0 + 38) as *const u8));
                        let l16 = i32::from(*((ptr0 + 40) as *const u16));
                        let l17 = i32::from(*((ptr0 + 42) as *const u16));
                        let l18 = i32::from(*((ptr0 + 44) as *const u8));
                        let l19 = i32::from(*((ptr0 + 45) as *const u8));
                        let l20 = i32::from(*((ptr0 + 46) as *const u8));
                        let l21 = i32::from(*((ptr0 + 47) as *const u8));
                        let l22 = i32::from(*((ptr0 + 48) as *const u8));
                        let l23 = i32::from(*((ptr0 + 49) as *const u8));
                        super::super::super::wadu436::usb::descriptors::DeviceDescriptor {
                            product_name: match l1 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l2 = *((ptr0 + 4) as *const i32);
                                        let l3 = *((ptr0 + 8) as *const i32);
                                        let len4 = l3 as usize;
                                        let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);

                                        wit_bindgen::rt::string_lift(bytes4)
                                    };
                                    Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            manufacturer_name: match l5 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l6 = *((ptr0 + 16) as *const i32);
                                        let l7 = *((ptr0 + 20) as *const i32);
                                        let len8 = l7 as usize;
                                        let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);

                                        wit_bindgen::rt::string_lift(bytes8)
                                    };
                                    Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            serial_number: match l9 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l10 = *((ptr0 + 28) as *const i32);
                                        let l11 = *((ptr0 + 32) as *const i32);
                                        let len12 = l11 as usize;
                                        let bytes12 =
                                            Vec::from_raw_parts(l10 as *mut _, len12, len12);

                                        wit_bindgen::rt::string_lift(bytes12)
                                    };
                                    Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            usb_version: (l13 as u8, l14 as u8, l15 as u8),
                            vendor_id: l16 as u16,
                            product_id: l17 as u16,
                            device_version: (l18 as u8, l19 as u8, l20 as u8),
                            device_class: l21 as u8,
                            device_subclass: l22 as u8,
                            device_protocol: l23 as u8,
                        }
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the USB Speed of the device (Low, Full, High, ...)
                pub fn speed(&self) -> Speed {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.speed"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wadu436::usb::types::Speed::_lift(ret as u8)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns all the configurations the device supports
                pub fn configurations(&self) -> wit_bindgen::rt::vec::Vec<UsbConfiguration> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.configurations"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = Vec::with_capacity(len4 as usize);
                        for i in 0..len4 {
                            let base = base4 + i * 4;
                            let e4 = {
                                let l3 = *((base + 0) as *const i32);

                                UsbConfiguration::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        wit_bindgen::rt::dealloc(base4, (len4 as usize) * 4, 4);
                        result4
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the currently active configuration
                pub fn active_configuration(&self) -> UsbConfiguration {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.active-configuration"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        UsbConfiguration::from_handle(ret as u32)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Opens the device. This is required before any transfers can be made.
                pub fn open(&self) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.open"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns whether the device is currently open.
                pub fn opened(&self) -> bool {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.opened"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        wit_bindgen::rt::bool_lift(ret as u8)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Resets the device.
                pub fn reset(&self) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.reset"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Closes the device.
                pub fn close(&self) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.close"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Selects the active configuration. The device must first be opened.
                pub fn select_configuration(&self, configuration: &UsbConfiguration) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.select-configuration"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (configuration).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Claims an interface for exclusive use. Also selects the alternate interface, as the usb-interface resource actually represents an alternate interface.
                pub fn claim_interface(&self, if_: &UsbInterface) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.claim-interface"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (if_).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Releases an interface.
                pub fn release_interface(&self, if_: &UsbInterface) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.release-interface"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (if_).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Clears a halt on a specific endpoint.
                pub fn clear_halt(&self, endpoint: &UsbEndpoint) {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.clear-halt"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32);
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read control data from the device. The endpoint is always EP0.
                pub fn read_control(&self, request: ControlSetup) -> wit_bindgen::rt::vec::Vec<u8> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let super::super::super::wadu436::usb::types::ControlSetup {
                            request_type: request_type0,
                            request_recipient: request_recipient0,
                            request: request0,
                            value: value0,
                            index: index0,
                        } = request;
                        let ptr1 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-control"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            request_type0.clone() as i32,
                            request_recipient0.clone() as i32,
                            wit_bindgen::rt::as_i32(request0),
                            wit_bindgen::rt::as_i32(value0),
                            wit_bindgen::rt::as_i32(index0),
                            ptr1,
                        );
                        let l2 = *((ptr1 + 0) as *const i32);
                        let l3 = *((ptr1 + 4) as *const i32);
                        let len4 = l3 as usize;
                        Vec::from_raw_parts(l2 as *mut _, len4, len4)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write control data to the device. The endpoint is always EP0. The return value is the number of bytes written.
                pub fn write_control(&self, request: ControlSetup, data: &[u8]) -> u64 {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        let super::super::super::wadu436::usb::types::ControlSetup {
                            request_type: request_type0,
                            request_recipient: request_recipient0,
                            request: request0,
                            value: value0,
                            index: index0,
                        } = request;
                        let vec1 = data;
                        let ptr1 = vec1.as_ptr() as i32;
                        let len1 = vec1.len() as i32;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-control"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                            ) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                        ) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            request_type0.clone() as i32,
                            request_recipient0.clone() as i32,
                            wit_bindgen::rt::as_i32(request0),
                            wit_bindgen::rt::as_i32(value0),
                            wit_bindgen::rt::as_i32(index0),
                            ptr1,
                            len1,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read data from an interrupt endpoint. The endpoint must be an interrupt endpoint.
                pub fn read_interrupt(
                    &self,
                    endpoint: &UsbEndpoint,
                ) -> wit_bindgen::rt::vec::Vec<u8> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-interrupt"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let len3 = l2 as usize;
                        Vec::from_raw_parts(l1 as *mut _, len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to an interrupt endpoint. The endpoint must be an interrupt endpoint. The return value is the number of bytes written.
                pub fn write_interrupt(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr() as i32;
                        let len0 = vec0.len() as i32;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-interrupt"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0,
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Read data from a bulk endpoint. The endpoint must be a bulk endpoint.
                pub fn read_bulk(&self, endpoint: &UsbEndpoint) -> wit_bindgen::rt::vec::Vec<u8> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-bulk"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let len3 = l2 as usize;
                        Vec::from_raw_parts(l1 as *mut _, len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to a bulk endpoint. The endpoint must be a bulk endpoint. The return value is the number of bytes written.
                pub fn write_bulk(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr() as i32;
                        let len0 = vec0.len() as i32;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-bulk"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0,
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// TODO: support sending/receiving multiple packets at once for isochronous endpoints?
                /// Read data from an isochronous endpoint. The endpoint must be an isochronous endpoint.
                pub fn read_isochronous(
                    &self,
                    endpoint: &UsbEndpoint,
                ) -> wit_bindgen::rt::vec::Vec<u8> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.read-isochronous"]
                            fn wit_import(_: i32, _: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, (endpoint).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let len3 = l2 as usize;
                        Vec::from_raw_parts(l1 as *mut _, len3, len3)
                    }
                }
            }
            impl UsbDevice {
                #[allow(unused_unsafe, clippy::all)]
                /// Write data to an isochronous endpoint. The endpoint must be an isochronous endpoint. The return value is the number of bytes written.
                pub fn write_isochronous(&self, endpoint: &UsbEndpoint, data: &[u8]) -> u64 {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        let vec0 = data;
                        let ptr0 = vec0.as_ptr() as i32;
                        let len0 = vec0.len() as i32;

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-device.write-isochronous"]
                            fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            (endpoint).handle() as i32,
                            ptr0,
                            len0,
                        );
                        ret as u64
                    }
                }
            }
            impl UsbConfiguration {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> ConfigurationDescriptor {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 20]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-configuration.descriptor"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*((ptr0 + 0) as *const u8));
                        let l2 = i32::from(*((ptr0 + 4) as *const u8));
                        let l6 = i32::from(*((ptr0 + 16) as *const u8));
                        let l7 = i32::from(*((ptr0 + 17) as *const u8));
                        let l8 = i32::from(*((ptr0 + 18) as *const u16));
                        super::super::super::wadu436::usb::descriptors::ConfigurationDescriptor {
                            number: l1 as u8,
                            description: match l2 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l3 = *((ptr0 + 8) as *const i32);
                                        let l4 = *((ptr0 + 12) as *const i32);
                                        let len5 = l4 as usize;
                                        let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);

                                        wit_bindgen::rt::string_lift(bytes5)
                                    };
                                    Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                            self_powered: wit_bindgen::rt::bool_lift(l6 as u8),
                            remote_wakeup: wit_bindgen::rt::bool_lift(l7 as u8),
                            max_power: l8 as u16,
                        }
                    }
                }
            }
            impl UsbConfiguration {
                #[allow(unused_unsafe, clippy::all)]
                pub fn interfaces(&self) -> wit_bindgen::rt::vec::Vec<UsbInterface> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-configuration.interfaces"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = Vec::with_capacity(len4 as usize);
                        for i in 0..len4 {
                            let base = base4 + i * 4;
                            let e4 = {
                                let l3 = *((base + 0) as *const i32);

                                UsbInterface::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        wit_bindgen::rt::dealloc(base4, (len4 as usize) * 4, 4);
                        result4
                    }
                }
            }
            impl UsbInterface {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> InterfaceDescriptor {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 20]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-interface.descriptor"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*((ptr0 + 0) as *const u8));
                        let l2 = i32::from(*((ptr0 + 1) as *const u8));
                        let l3 = i32::from(*((ptr0 + 2) as *const u8));
                        let l4 = i32::from(*((ptr0 + 3) as *const u8));
                        let l5 = i32::from(*((ptr0 + 4) as *const u8));
                        let l6 = i32::from(*((ptr0 + 8) as *const u8));
                        super::super::super::wadu436::usb::descriptors::InterfaceDescriptor {
                            interface_number: l1 as u8,
                            alternate_setting: l2 as u8,
                            interface_class: l3 as u8,
                            interface_subclass: l4 as u8,
                            interface_protocol: l5 as u8,
                            interface_name: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = *((ptr0 + 12) as *const i32);
                                        let l8 = *((ptr0 + 16) as *const i32);
                                        let len9 = l8 as usize;
                                        let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);

                                        wit_bindgen::rt::string_lift(bytes9)
                                    };
                                    Some(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                            },
                        }
                    }
                }
            }
            impl UsbInterface {
                #[allow(unused_unsafe, clippy::all)]
                pub fn endpoints(&self) -> wit_bindgen::rt::vec::Vec<UsbEndpoint> {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-interface.endpoints"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *((ptr0 + 0) as *const i32);
                        let l2 = *((ptr0 + 4) as *const i32);
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = Vec::with_capacity(len4 as usize);
                        for i in 0..len4 {
                            let base = base4 + i * 4;
                            let e4 = {
                                let l3 = *((base + 0) as *const i32);

                                UsbEndpoint::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        wit_bindgen::rt::dealloc(base4, (len4 as usize) * 4, 4);
                        result4
                    }
                }
            }
            impl UsbEndpoint {
                #[allow(unused_unsafe, clippy::all)]
                pub fn descriptor(&self) -> EndpointDescriptor {
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, string::String, vec::Vec};
                    unsafe {
                        #[repr(align(2))]
                        struct RetArea([u8; 8]);
                        let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                        let ptr0 = ret_area.as_mut_ptr() as i32;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wadu436:usb/device@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]usb-endpoint.descriptor"]
                            fn wit_import(_: i32, _: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*((ptr0 + 0) as *const u8));
                        let l2 = i32::from(*((ptr0 + 1) as *const u8));
                        let l3 = i32::from(*((ptr0 + 2) as *const u8));
                        let l4 = i32::from(*((ptr0 + 4) as *const u16));
                        let l5 = i32::from(*((ptr0 + 6) as *const u8));
                        super::super::super::wadu436::usb::descriptors::EndpointDescriptor {
                            endpoint_number: l1 as u8,
                            direction: super::super::super::wadu436::usb::types::Direction::_lift(
                                l2 as u8,
                            ),
                            transfer_type:
                                super::super::super::wadu436::usb::types::TransferType::_lift(
                                    l3 as u8,
                                ),
                            max_packet_size: l4 as u16,
                            interval: l5 as u8,
                        }
                    }
                }
            }
        }
    }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:bindingsrust-wasi-from-crates-io"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3138] = [
    0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101,
    110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 195, 23, 1, 65, 2, 1, 65, 18, 1,
    66, 19, 1, 111, 3, 125, 125, 125, 4, 0, 7, 118, 101, 114, 115, 105, 111, 110, 3, 0, 0, 1, 107,
    123, 1, 107, 125, 1, 107, 115, 1, 114, 6, 9, 118, 101, 110, 100, 111, 114, 45, 105, 100, 2, 10,
    112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 2, 10, 99, 108, 97, 115, 115, 45, 99, 111, 100,
    101, 3, 13, 115, 117, 98, 99, 108, 97, 115, 115, 45, 99, 111, 100, 101, 3, 13, 112, 114, 111,
    116, 111, 99, 111, 108, 45, 99, 111, 100, 101, 3, 13, 115, 101, 114, 105, 97, 108, 45, 110,
    117, 109, 98, 101, 114, 4, 4, 0, 6, 102, 105, 108, 116, 101, 114, 3, 0, 5, 1, 109, 4, 7, 99,
    111, 110, 116, 114, 111, 108, 11, 105, 115, 111, 99, 104, 114, 111, 110, 111, 117, 115, 4, 98,
    117, 108, 107, 9, 105, 110, 116, 101, 114, 114, 117, 112, 116, 4, 0, 13, 116, 114, 97, 110,
    115, 102, 101, 114, 45, 116, 121, 112, 101, 3, 0, 7, 1, 109, 2, 3, 111, 117, 116, 2, 105, 110,
    4, 0, 9, 100, 105, 114, 101, 99, 116, 105, 111, 110, 3, 0, 9, 1, 109, 6, 7, 117, 110, 107, 110,
    111, 119, 110, 3, 108, 111, 119, 4, 102, 117, 108, 108, 4, 104, 105, 103, 104, 5, 115, 117,
    112, 101, 114, 9, 115, 117, 112, 101, 114, 112, 108, 117, 115, 4, 0, 5, 115, 112, 101, 101,
    100, 3, 0, 11, 1, 109, 3, 8, 115, 116, 97, 110, 100, 97, 114, 100, 5, 99, 108, 97, 115, 115, 6,
    118, 101, 110, 100, 111, 114, 4, 0, 18, 99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116,
    117, 112, 45, 116, 121, 112, 101, 3, 0, 13, 1, 109, 3, 6, 100, 101, 118, 105, 99, 101, 2, 105,
    102, 8, 101, 110, 100, 112, 111, 105, 110, 116, 4, 0, 23, 99, 111, 110, 116, 114, 111, 108, 45,
    115, 101, 116, 117, 112, 45, 114, 101, 99, 105, 112, 105, 101, 110, 116, 3, 0, 15, 1, 114, 5,
    12, 114, 101, 113, 117, 101, 115, 116, 45, 116, 121, 112, 101, 14, 17, 114, 101, 113, 117, 101,
    115, 116, 45, 114, 101, 99, 105, 112, 105, 101, 110, 116, 16, 7, 114, 101, 113, 117, 101, 115,
    116, 125, 5, 118, 97, 108, 117, 101, 123, 5, 105, 110, 100, 101, 120, 123, 4, 0, 13, 99, 111,
    110, 116, 114, 111, 108, 45, 115, 101, 116, 117, 112, 3, 0, 17, 3, 1, 23, 119, 97, 100, 117,
    52, 51, 54, 58, 117, 115, 98, 47, 116, 121, 112, 101, 115, 64, 48, 46, 48, 46, 49, 5, 0, 2, 3,
    0, 0, 7, 118, 101, 114, 115, 105, 111, 110, 2, 3, 0, 0, 9, 100, 105, 114, 101, 99, 116, 105,
    111, 110, 2, 3, 0, 0, 13, 116, 114, 97, 110, 115, 102, 101, 114, 45, 116, 121, 112, 101, 1, 66,
    15, 2, 3, 2, 1, 1, 4, 0, 7, 118, 101, 114, 115, 105, 111, 110, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 9,
    100, 105, 114, 101, 99, 116, 105, 111, 110, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 13, 116, 114, 97,
    110, 115, 102, 101, 114, 45, 116, 121, 112, 101, 3, 0, 4, 1, 107, 115, 1, 114, 10, 12, 112,
    114, 111, 100, 117, 99, 116, 45, 110, 97, 109, 101, 6, 17, 109, 97, 110, 117, 102, 97, 99, 116,
    117, 114, 101, 114, 45, 110, 97, 109, 101, 6, 13, 115, 101, 114, 105, 97, 108, 45, 110, 117,
    109, 98, 101, 114, 6, 11, 117, 115, 98, 45, 118, 101, 114, 115, 105, 111, 110, 1, 9, 118, 101,
    110, 100, 111, 114, 45, 105, 100, 123, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 123,
    14, 100, 101, 118, 105, 99, 101, 45, 118, 101, 114, 115, 105, 111, 110, 1, 12, 100, 101, 118,
    105, 99, 101, 45, 99, 108, 97, 115, 115, 125, 15, 100, 101, 118, 105, 99, 101, 45, 115, 117,
    98, 99, 108, 97, 115, 115, 125, 15, 100, 101, 118, 105, 99, 101, 45, 112, 114, 111, 116, 111,
    99, 111, 108, 125, 4, 0, 17, 100, 101, 118, 105, 99, 101, 45, 100, 101, 115, 99, 114, 105, 112,
    116, 111, 114, 3, 0, 7, 1, 114, 5, 6, 110, 117, 109, 98, 101, 114, 125, 11, 100, 101, 115, 99,
    114, 105, 112, 116, 105, 111, 110, 6, 12, 115, 101, 108, 102, 45, 112, 111, 119, 101, 114, 101,
    100, 127, 13, 114, 101, 109, 111, 116, 101, 45, 119, 97, 107, 101, 117, 112, 127, 9, 109, 97,
    120, 45, 112, 111, 119, 101, 114, 123, 4, 0, 24, 99, 111, 110, 102, 105, 103, 117, 114, 97,
    116, 105, 111, 110, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 3, 0, 9, 1, 114, 6,
    16, 105, 110, 116, 101, 114, 102, 97, 99, 101, 45, 110, 117, 109, 98, 101, 114, 125, 17, 97,
    108, 116, 101, 114, 110, 97, 116, 101, 45, 115, 101, 116, 116, 105, 110, 103, 125, 15, 105,
    110, 116, 101, 114, 102, 97, 99, 101, 45, 99, 108, 97, 115, 115, 125, 18, 105, 110, 116, 101,
    114, 102, 97, 99, 101, 45, 115, 117, 98, 99, 108, 97, 115, 115, 125, 18, 105, 110, 116, 101,
    114, 102, 97, 99, 101, 45, 112, 114, 111, 116, 111, 99, 111, 108, 125, 14, 105, 110, 116, 101,
    114, 102, 97, 99, 101, 45, 110, 97, 109, 101, 6, 4, 0, 20, 105, 110, 116, 101, 114, 102, 97,
    99, 101, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 3, 0, 11, 1, 114, 5, 15, 101,
    110, 100, 112, 111, 105, 110, 116, 45, 110, 117, 109, 98, 101, 114, 125, 9, 100, 105, 114, 101,
    99, 116, 105, 111, 110, 3, 13, 116, 114, 97, 110, 115, 102, 101, 114, 45, 116, 121, 112, 101,
    5, 15, 109, 97, 120, 45, 112, 97, 99, 107, 101, 116, 45, 115, 105, 122, 101, 123, 8, 105, 110,
    116, 101, 114, 118, 97, 108, 125, 4, 0, 19, 101, 110, 100, 112, 111, 105, 110, 116, 45, 100,
    101, 115, 99, 114, 105, 112, 116, 111, 114, 3, 0, 13, 3, 1, 29, 119, 97, 100, 117, 52, 51, 54,
    58, 117, 115, 98, 47, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 64, 48, 46, 48, 46,
    49, 5, 4, 2, 3, 0, 1, 17, 100, 101, 118, 105, 99, 101, 45, 100, 101, 115, 99, 114, 105, 112,
    116, 111, 114, 2, 3, 0, 1, 24, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110,
    45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 2, 3, 0, 1, 20, 105, 110, 116, 101, 114,
    102, 97, 99, 101, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 2, 3, 0, 1, 19, 101,
    110, 100, 112, 111, 105, 110, 116, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 2, 3,
    0, 0, 5, 115, 112, 101, 101, 100, 2, 3, 0, 0, 6, 102, 105, 108, 116, 101, 114, 2, 3, 0, 0, 18,
    99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116, 117, 112, 45, 116, 121, 112, 101, 2, 3, 0,
    0, 23, 99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116, 117, 112, 45, 114, 101, 99, 105,
    112, 105, 101, 110, 116, 2, 3, 0, 0, 13, 99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116,
    117, 112, 1, 66, 83, 2, 3, 2, 1, 5, 4, 0, 17, 100, 101, 118, 105, 99, 101, 45, 100, 101, 115,
    99, 114, 105, 112, 116, 111, 114, 3, 0, 0, 2, 3, 2, 1, 6, 4, 0, 24, 99, 111, 110, 102, 105,
    103, 117, 114, 97, 116, 105, 111, 110, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 3,
    0, 2, 2, 3, 2, 1, 7, 4, 0, 20, 105, 110, 116, 101, 114, 102, 97, 99, 101, 45, 100, 101, 115,
    99, 114, 105, 112, 116, 111, 114, 3, 0, 4, 2, 3, 2, 1, 8, 4, 0, 19, 101, 110, 100, 112, 111,
    105, 110, 116, 45, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 3, 0, 6, 2, 3, 2, 1, 9, 4,
    0, 5, 115, 112, 101, 101, 100, 3, 0, 8, 2, 3, 2, 1, 10, 4, 0, 6, 102, 105, 108, 116, 101, 114,
    3, 0, 10, 2, 3, 2, 1, 11, 4, 0, 18, 99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116, 117,
    112, 45, 116, 121, 112, 101, 3, 0, 12, 2, 3, 2, 1, 12, 4, 0, 23, 99, 111, 110, 116, 114, 111,
    108, 45, 115, 101, 116, 117, 112, 45, 114, 101, 99, 105, 112, 105, 101, 110, 116, 3, 0, 14, 2,
    3, 2, 1, 13, 4, 0, 13, 99, 111, 110, 116, 114, 111, 108, 45, 115, 101, 116, 117, 112, 3, 0, 16,
    4, 0, 10, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 3, 1, 4, 0, 17, 117, 115, 98, 45, 99,
    111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 3, 1, 4, 0, 13, 117, 115, 98, 45,
    105, 110, 116, 101, 114, 102, 97, 99, 101, 3, 1, 4, 0, 12, 117, 115, 98, 45, 101, 110, 100,
    112, 111, 105, 110, 116, 3, 1, 1, 105, 18, 1, 112, 22, 1, 64, 0, 0, 23, 4, 0, 28, 91, 115, 116,
    97, 116, 105, 99, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 101, 110, 117, 109,
    101, 114, 97, 116, 101, 1, 24, 1, 107, 22, 1, 64, 1, 6, 102, 105, 108, 116, 101, 114, 11, 0,
    25, 4, 0, 33, 91, 115, 116, 97, 116, 105, 99, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99,
    101, 46, 114, 101, 113, 117, 101, 115, 116, 45, 100, 101, 118, 105, 99, 101, 1, 26, 1, 104, 18,
    1, 64, 1, 4, 115, 101, 108, 102, 27, 0, 1, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 117,
    115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114,
    1, 28, 1, 64, 1, 4, 115, 101, 108, 102, 27, 0, 9, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100,
    93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 115, 112, 101, 101, 100, 1, 29, 1, 105,
    19, 1, 112, 30, 1, 64, 1, 4, 115, 101, 108, 102, 27, 0, 31, 4, 0, 33, 91, 109, 101, 116, 104,
    111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 99, 111, 110, 102, 105, 103,
    117, 114, 97, 116, 105, 111, 110, 115, 1, 32, 1, 64, 1, 4, 115, 101, 108, 102, 27, 0, 30, 4, 0,
    39, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46,
    97, 99, 116, 105, 118, 101, 45, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110,
    1, 33, 1, 64, 1, 4, 115, 101, 108, 102, 27, 1, 0, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100,
    93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 111, 112, 101, 110, 1, 34, 1, 64, 1, 4,
    115, 101, 108, 102, 27, 0, 127, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98,
    45, 100, 101, 118, 105, 99, 101, 46, 111, 112, 101, 110, 101, 100, 1, 35, 4, 0, 24, 91, 109,
    101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 114, 101, 115,
    101, 116, 1, 34, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101,
    118, 105, 99, 101, 46, 99, 108, 111, 115, 101, 1, 34, 1, 104, 19, 1, 64, 2, 4, 115, 101, 108,
    102, 27, 13, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 36, 1, 0, 4, 0, 39,
    91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 115,
    101, 108, 101, 99, 116, 45, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 1,
    37, 1, 104, 20, 1, 64, 2, 4, 115, 101, 108, 102, 27, 2, 105, 102, 38, 1, 0, 4, 0, 34, 91, 109,
    101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 99, 108, 97,
    105, 109, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 1, 39, 4, 0, 36, 91, 109, 101, 116,
    104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 114, 101, 108, 101, 97,
    115, 101, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 1, 39, 1, 104, 21, 1, 64, 2, 4, 115,
    101, 108, 102, 27, 8, 101, 110, 100, 112, 111, 105, 110, 116, 40, 1, 0, 4, 0, 29, 91, 109, 101,
    116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 99, 108, 101, 97,
    114, 45, 104, 97, 108, 116, 1, 41, 1, 112, 125, 1, 64, 2, 4, 115, 101, 108, 102, 27, 7, 114,
    101, 113, 117, 101, 115, 116, 17, 0, 42, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 117,
    115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 114, 101, 97, 100, 45, 99, 111, 110, 116, 114,
    111, 108, 1, 43, 1, 64, 3, 4, 115, 101, 108, 102, 27, 7, 114, 101, 113, 117, 101, 115, 116, 17,
    4, 100, 97, 116, 97, 42, 0, 119, 4, 0, 32, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98,
    45, 100, 101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 45, 99, 111, 110, 116, 114, 111,
    108, 1, 44, 1, 64, 2, 4, 115, 101, 108, 102, 27, 8, 101, 110, 100, 112, 111, 105, 110, 116, 40,
    0, 42, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105,
    99, 101, 46, 114, 101, 97, 100, 45, 105, 110, 116, 101, 114, 114, 117, 112, 116, 1, 45, 1, 64,
    3, 4, 115, 101, 108, 102, 27, 8, 101, 110, 100, 112, 111, 105, 110, 116, 40, 4, 100, 97, 116,
    97, 42, 0, 119, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101,
    118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 45, 105, 110, 116, 101, 114, 114, 117, 112,
    116, 1, 46, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118,
    105, 99, 101, 46, 114, 101, 97, 100, 45, 98, 117, 108, 107, 1, 45, 4, 0, 29, 91, 109, 101, 116,
    104, 111, 100, 93, 117, 115, 98, 45, 100, 101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101,
    45, 98, 117, 108, 107, 1, 46, 4, 0, 35, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45,
    100, 101, 118, 105, 99, 101, 46, 114, 101, 97, 100, 45, 105, 115, 111, 99, 104, 114, 111, 110,
    111, 117, 115, 1, 45, 4, 0, 36, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 100,
    101, 118, 105, 99, 101, 46, 119, 114, 105, 116, 101, 45, 105, 115, 111, 99, 104, 114, 111, 110,
    111, 117, 115, 1, 46, 1, 64, 1, 4, 115, 101, 108, 102, 36, 0, 3, 4, 0, 36, 91, 109, 101, 116,
    104, 111, 100, 93, 117, 115, 98, 45, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111,
    110, 46, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 1, 47, 1, 105, 20, 1, 112, 48, 1, 64,
    1, 4, 115, 101, 108, 102, 36, 0, 49, 4, 0, 36, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115,
    98, 45, 99, 111, 110, 102, 105, 103, 117, 114, 97, 116, 105, 111, 110, 46, 105, 110, 116, 101,
    114, 102, 97, 99, 101, 115, 1, 50, 1, 64, 1, 4, 115, 101, 108, 102, 38, 0, 5, 4, 0, 32, 91,
    109, 101, 116, 104, 111, 100, 93, 117, 115, 98, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101,
    46, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 1, 51, 1, 105, 21, 1, 112, 52, 1, 64, 1,
    4, 115, 101, 108, 102, 38, 0, 53, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 117, 115, 98,
    45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 46, 101, 110, 100, 112, 111, 105, 110, 116, 115,
    1, 54, 1, 64, 1, 4, 115, 101, 108, 102, 40, 0, 7, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100,
    93, 117, 115, 98, 45, 101, 110, 100, 112, 111, 105, 110, 116, 46, 100, 101, 115, 99, 114, 105,
    112, 116, 111, 114, 1, 55, 3, 1, 24, 119, 97, 100, 117, 52, 51, 54, 58, 117, 115, 98, 47, 100,
    101, 118, 105, 99, 101, 64, 48, 46, 48, 46, 49, 5, 14, 4, 1, 29, 119, 97, 100, 117, 52, 51, 54,
    58, 117, 115, 98, 45, 98, 105, 110, 100, 105, 110, 103, 115, 47, 98, 105, 110, 100, 105, 110,
    103, 115, 4, 0, 11, 14, 1, 0, 8, 98, 105, 110, 100, 105, 110, 103, 115, 3, 0, 0, 0, 71, 9, 112,
    114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45,
    98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 7, 48, 46, 50,
    48, 48, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115,
    116, 6, 48, 46, 49, 57, 46, 49,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
